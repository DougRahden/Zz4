# === Cell 10: Enrich primary and secondary coauthor CSVs with profile-level affiliation data ===

import pandas as pd
import requests
import time

# Load primary and secondary coauthor files
primary_df = pd.read_csv("D:/aa030/output/primary_coauthor_output.csv")
secondary_df = pd.read_csv("D:/aa030/output/secondary_coauthor_output.csv")

# Build list of unique SCOPUS IDs to enrich
primary_ids = set(primary_df['coauthor_scopusid'].astype(str))
secondary_ids = set(secondary_df['2ndcoauthor_scopusid'].astype(str))
all_ids = primary_ids.union(secondary_ids)

# Query SCOPUS Author API for each unique ID
api_calls = {'author_profile_retrieval': 0}
profile_lookup = {}
for scopus_id in all_ids:
    url = f"https://api.elsevier.com/content/author/author_id/{scopus_id}?view=ENHANCED"
    print(f"[API] Retrieving profile for SCOPUS ID {scopus_id}")
    resp = requests.get(url, headers=headers)
    api_calls['author_profile_retrieval'] += 1
    time.sleep(1)  # Respect rate limits

    if resp.status_code != 200:
        print(f"[SKIP] Failed to retrieve profile for {scopus_id}: {resp.status_code}")
        continue

    try:
        data = resp.json()['author-retrieval-response'][0]
        affil = data.get('affiliation-current', {})
        profile_lookup[scopus_id] = {
            'latest_affiliation': affil.get('affiliation-name', ''),
            'latest_affiliation_city': affil.get('affiliation-city', ''),
            'latest_affiliation_country': affil.get('affiliation-country', '')
        }
    except Exception as e:
        print(f"[ERROR] Failed to parse profile for {scopus_id}: {e}")

# Add enriched fields to primary coauthors
primary_df['latest_affiliation'] = primary_df['coauthor_scopusid'].astype(str).map(lambda x: profile_lookup.get(x, {}).get('latest_affiliation', ''))
primary_df['latest_affiliation_city'] = primary_df['coauthor_scopusid'].astype(str).map(lambda x: profile_lookup.get(x, {}).get('latest_affiliation_city', ''))
primary_df['latest_affiliation_country'] = primary_df['coauthor_scopusid'].astype(str).map(lambda x: profile_lookup.get(x, {}).get('latest_affiliation_country', ''))

# Add enriched fields to secondary coauthors
secondary_df['latest_affiliation'] = secondary_df['2ndcoauthor_scopusid'].astype(str).map(lambda x: profile_lookup.get(x, {}).get('latest_affiliation', ''))
secondary_df['latest_affiliation_city'] = secondary_df['2ndcoauthor_scopusid'].astype(str).map(lambda x: profile_lookup.get(x, {}).get('latest_affiliation_city', ''))
secondary_df['latest_affiliation_country'] = secondary_df['2ndcoauthor_scopusid'].astype(str).map(lambda x: profile_lookup.get(x, {}).get('latest_affiliation_country', ''))

# Save updated files
primary_df.to_csv("D:/aa030/output/primary_coauthor_output.csv", index=False)
secondary_df.to_csv("D:/aa030/output/secondary_coauthor_output.csv", index=False)

print("\n[SAVED] Updated primary and secondary coauthor files with profile-level affiliation info.")

print("\n=== API USAGE SUMMARY ===")
for k, v in api_calls.items():
    print(f"{k}: {v}")
